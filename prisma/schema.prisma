generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 String               @id @default(uuid()) @db.Uuid
  name               String?              @db.VarChar(255)
  age                Int?
  email              String               @unique(map: "users_email_unique") @db.VarChar(255)
  phone              String?              @db.VarChar(25)
  metadata           Json?
  status             Boolean              @default(true)
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime             @updatedAt @map("updated_at") @db.Timestamp(6)
  eventRegistrations EventRegisteration[]

  @@map("users")
}

model Event {
  id                 String               @id @default(uuid()) @db.Uuid
  name               String               @db.VarChar(50)
  startDate          DateTime             @map("start_date") @db.Timestamp(6)
  endDate            DateTime?            @map("end_date") @db.Timestamp(6)
  metadata           Json?
  type               EventType            @default(Virtual)
  organizer          String?              @db.VarChar(255)
  status             Boolean              @default(true)
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime             @updatedAt @map("updated_at") @db.Timestamp(6)
  eventRegistrations EventRegisteration[]

  @@map("event")
}

enum EventType {
  Virtual
  Physical
}

model EventRegisteration {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  user      Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  eventId   String   @map("event_id") @db.Uuid
  event     Event    @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  ticket    Ticket?

  @@unique([userId, eventId])
  @@map("event_registerations")
}

model Ticket {
  id                  String             @id @default(uuid()) @db.Uuid
  eventRegistrationId String             @unique @map("event_registration_id") @db.Uuid
  event_registration  EventRegisteration @relation(fields: [eventRegistrationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  barcodeData         String?            @map("barcode_data") @db.Text
  status              TicketStatus       @default(Pending)
  createdAt           DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime?          @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("tickets")
}

model TicketAudit {
  id           String       @id @default(uuid()) @db.Uuid
  ticketStatus TicketStatus
  ticketId     String       @map("ticket_id") @db.Uuid
  changedAt    DateTime     @default(now()) @map("changed_at") @db.Timestamp(6)
  status       Boolean      @default(true)

  @@map("tickets_audit")
}

enum TicketStatus {
  Pending
  Confirmed
  Cancelled
}
